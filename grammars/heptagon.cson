scopeName: "source.heptagon"
name: "Heptagon"
fileTypes: [
	"ept"
]
patterns: [
	{
		include: "#externFile"
	}
	{
		include: "#function"
	}
	{
		include: "#comment"
	}
	{
		include: "#constant"
	}
	{
		include: "#userTypes"
	}
]
repository:
	userTypes:
		begin: "(type)\\s*(\\w+)\\s*=\\s*{"
		beginCaptures:
			1: name: "storage.type.heptagon" # to verify
			2: name: "variable.other.heptagon" # to verify
		patterns: [
			{
				match: "\\s*([\\s\\w\^,:]+);"
				captures:
					1:
						patterns: [
							{
								include: "#parameterDec"
							}
						]
			}
			{
				match: "\\s*([\\s\\w\^,:]+)"
				captures:
					1:
						patterns: [
							{
								include: "#parameterDec"
							}
						]
				end: "(?=\})"
			}
		]

		end: "}"

	constant:
		begin: "\\s*(const)\\s+(\\w+)\\s*:\\s*(\\w+)\\s*(=)\\s*(.*)"
		beginCaptures:
			1: name: "storage.type.heptagon"
			2: name: "variable.other.heptagon"
			3:
				patterns: [
					{
						include: "#type"
					}
				]
			4: name: "keyword.operator.heptagon"
			5: patterns: [
				{
					include: "#constantValue"
				}
			]
		end: "\\s*$"
	comment:
		begin: "\\(\\*"
		name: "comment.block.heptagon"
		end: "\\*\\)"
	externFile:
		match: "^\\s*(open)\\s*(\\w*)"
		captures:
			1: name: "storage.type.heptagon"
			2: name: "variable.other.heptagon"
	function:
		begin: "(fun|node)\\s+(\\w+)\\s*(?:<<([^>]*)>>)?\\s*\\(([\\w\\s\^:;]*)\\)"
		beginCaptures:
			1: name: "storage.type.heptagon"
			2: name: "entity.name.function.heptagon"
			3:
				patterns: [
					{
						include: "#staticArg"
					}
				]
			4:
				patterns: [
					{
						include: "#parameterList"
					}
				]
		patterns: [
			{
				begin: "(returns)\\s*\\(([\\w\\s\^:;]*)\\)"
				beginCaptures:
					1: name: "keyword.control.heptagon"
					2:
						patterns: [
							{
								include: "#parameterList"
							}
						]
				end: "(?=let|var)"
			}
			{
				begin: "let"
				beginCaptures: 0: name: "keyword.control.heptagon"
				patterns: [
					{
						include: "#comment"
					}
					{
						include: "#letConstruct"
					}
					{
						begin: "(if)\\s+(\\w+)\\s+(then)"
						beginCaptures:
							1: name: "keyword.control.heptagon"
							# 2: name: "variable.other.heptagon" # NOTE: to much colored with this
							3: name: "keyword.control.heptagon"
						patterns: [
							{
								include: "#letConstruct"
							}
							{
								begin: "(else)"
								beginCaptures:
									1: name: "keyword.control.heptagon"
								patterns: [
									{
										include: "#letConstruct"
									}
								]
								end: "(?=end;)"
							}
						]
						end: "(end);"
						endCaptures:
							1: name: "keyword.control.heptagon"
					}
				]
				end: "(?=tel)"
			}
			{
				begin: "var"
				beginCaptures: 0: name: "keyword.control.heptagon"
				patterns: [
					{
						match: "\\s*([\\s\\w\\d\^,:]+);"
						captures:
							1:
								patterns: [
									{
										include: "#parameterDec"
									}
								]
					}
				]
				end: "(?=(let|tel))"
			}
		]
		end: "(tel)"
		endCaptures: 1: name: "keyword.control.heptagon"
	letConstruct:
		patterns: [
			{
				include: "#letConstruct2"
			}
			{
				begin: "(var)\\s*"
				beginCaptures: 1: name: "keyword.control.heptagon"
				patterns: [
					{
						match: "\\s*([\\s\\w\^,:]+);"
						captures:
							1:
								patterns: [
									{
										include: "#parameterDec"
									}
								]
					}
				]
				end: "(?=(in))"
			}
			{
				begin: "(in)\\s*"
				beginCaptures: 1: name: "keyword.control.heptagon"
				patterns: [
					{
						include: "#letConstruct2"
					}
				]
				end: "(?=(end|tel))"
			}
		]
	letConstruct2:
		begin: "\\s*(\\w+|\\(\\))\\s*(=)\\s*"
		beginCaptures:
			1: name: "variable.other.heptagon"
			2: name: "keyword.operator.heptagon"
		patterns: [
			{
				begin: "(merge)\\s+(\\w+)"
				beginCaptures:
					1: name: "keyword.control.heptagon"
					# 2: name: "variable.other.heptagon" # NOTE: to much colored with this
				patterns: [
					{
						match: "\\((\\w+)\\s*->(.*)\\)"
						captures:
							1:
								patterns: [
									{
										include: "#languageBoolean"
									}
								]
							2:
								patterns: [
									{
										include: "#assignment"
									}
								]
					}
				]
				end: "(?=;)"
			}
			{
				begin: "(if)\\s+(\\w+)\\s+(?=then)"
				beginCaptures:
					1: name: "keyword.control.heptagon"
					# 2: name: "variable.other.heptagon" # NOTE: to much colored with this
				patterns: [
					{
						match: "(then)\\s+(.*)\\s+(?=else)"
						captures:
							1: name: "keyword.control.heptagon"
							2:
								patterns: [
									{
										include: "#assignment"
									}
								]
					}
				]
				end: "(else)\\s+(.*)\\s*(?=;)"
				endCaptures:
					1: name: "keyword.control.heptagon"
					2:
						patterns: [
							{
								include: "#assignment"
							}
						]
			}
			{
				comment: "Multiline Structures"
				begin: "{"
				patterns: [
					{
						match: "(\\w+)\\s*(=)([^;]*)(?=})"
						captures:
							1: name: "variable.other.heptagon"
							2: name: "keyword.operator.heptagon"
							3: patterns: [ { include: "#assignment" }]
					}
					{
						match: "(\\w+)\\s*(=)([^;]*);"
						captures:
							1: name: "variable.other.heptagon"
							2: name: "keyword.operator.heptagon"
							3: patterns: [ { include: "#assignment" }]
					}
					{
						match: "(\\w+)\\s*(=)([^;]*)"
						captures:
							1: name: "variable.other.heptagon"
							2: name: "keyword.operator.heptagon"
							3: patterns: [ { include: "#assignment" }]
					}
					{
						match: "(\\w+)\\s+(with)\\s+\.([\\w\.]+)\\s*(=)([^;]*)"
						captures:
							2: name: "keyword.other.heptagon"
							3: name: "variable.other.heptagon"
							4: name: "keyword.operator.heptagon"
							5: patterns: [ { include: "#assignment" }]
					}
				]
				end: "}"
			}
			{
				match: "(.*)(?=;)"
				captures:
					1:
						patterns: [
							{
								include: "#assignment"
							}
						]
				end: "(?=;)"
			}
		]
		end: "\\s*;"
	assignment:
		patterns: [
			{
				comment: "Iterator Function call"
				match: "\\s*(\\w+)(<<)([\\w\\s,]*)(>>)\\s*(\\w+)\\s*\\((.*)\\)\\s*"
				captures:
					1:
						patterns: [
							{
								match: "(fold|map|foldi|mapi|mapfold)"
								name: "keyword.other.heptagon"
							}
						]
					2: name: "keyword.other.heptagon"
					# TODO: add coloration for the 3rd group
					4: name: "keyword.other.heptagon"
					5: name: "entity.name.function.heptagon"
					6:
						patterns: [
							{
								match: "([\\w\\s,]+)"
								captures:
									1:
										patterns: [
											{
												match: "([\\w\\s]+)"
												captures:
													1:
														patterns: [
															{
																include: "#assignment"
															}
														]
											}
										]
							}
							{
								match: "\\s*"
							}
						]
			}
			{
				comment: "Function call"
				match: "\\s*(\\w+)\\s*(?:(<<)(.*)(>>))?\\s*\\((.*)\\)\\s*"
				captures:
					1: name: "entity.name.function.heptagon"
					2: name: "entity.name.function.heptagon" # '<<' is considered as part of the function name
					# TODO: add coloration for the 3rd group
					4: name: "entity.name.function.heptagon" # '>>' is considered as part of the function name
					5:
						patterns: [
							{
								match: "([\\w\\s,]+)"
								captures:
									1:
										patterns: [
											{
												match: "([\\w\\s]+)"
												captures:
													1:
														patterns: [
															{
																include: "#assignment"
															}
														]
											}
										]
							}
							{
								match: "\\s*"
							}
						]
			}
			{
				comment: "Operator named"
				match: "\\s*(.*)\\s+(whenot|fby|when)\\s+(.*)\\s*"
				captures:
					1: patterns: [ { include: "#assignment" } ]
					2: name: "keyword.operator.heptagon"
					3: patterns: [ { include: "#assignment" } ]
			}
			{
				comment: "Operator"
				match: "\\s*(.*)\\s*(\\+.|-.|%.|\\/.|\\*.|=|\\+|-|%|\\/|\\*)\\s*(.*)\\s*"
				captures:
					1: patterns: [ { include: "#assignment" } ]
					2: name: "keyword.operator.heptagon"
					3: patterns: [ { include: "#assignment" } ]
			}
			{
				comment: "Parenthesis"
				match: "\\s*\\((.*)\\)\\s*"
				captures:
					1: patterns: [ { include: "#assignment" } ]
			}
			{
				include: "#languageConstant"
			}
			{
				comment: "Other variable name"
				match: "\\s*([a-z_][a-z0-9_]+)(?:\.([a-z_][a-z0-9_]+))+\\s*"
				# captures: # NOTE: to much colored with this
				# 	1: name: "variable.other.heptagon"
			}
			{
				comment: "Other variable name"
				match: "\\s*([a-z_][a-z0-9_]+)\\s*"
				# captures: # NOTE: to much colored with this
				# 	1: name: "variable.other.heptagon"
			}
			{
				include: "#constantValue"
			}
		]
	staticArg:
		patterns: [
			{
				match: "(\\w+)\\s*:\\s*(\\w+)(?:\\s*\\,\\s*(\\w+)\\s*:\\s*(\\w+))*"
				captures:
					1: name: "variable.parameter.heptagon"
					2:
						patterns: [
							{
								include: "#type"
							}
						]
					3: name: "variable.parameter.heptagon"
					4:
						patterns: [
							{
								include: "#type"
							}
						]
			}
		]
	parameterList:
		match: "\\s*(?:(\\w+)\\s*:\\s*([\\w\^]+)(?:\\s*;\\s*(\\w+)\\s*:\\s*([\\w\^]+))*)?\\s*"
		captures:
			1: name: "variable.parameter.heptagon"
			2:
				patterns: [
					{
						include: "#type"
					}
				]
			3: name: "variable.parameter.heptagon"
			4:
				patterns: [
					{
						include: "#type"
					}
				]
	parameterDec:
		match: "([\\w\\s,]+):\\s*([\\w\\d\^]+)\\s*"
		captures:
			1:
				patterns: [
					{
						match: "(\\w+)"
						captures: 1: name: "variable.other.heptagon"
					}
				]
			2:
				patterns: [
					{
						include: "#type"
					}
				]
	constantValue:
		patterns: [
			{
				match: "\\s*(0x\\h+)\\s*" # Hexadecimal
				captures: 1: name: "constant.numeric.heptagon"
			}
			{
				match: "\\s*(\\d+)\\s*" # Integers
				captures: 1: name: "constant.numeric.heptagon"
			}
			{
				match: "\\s*(\\d+.\\d+)\\s*" # Floats
				captures: 1: name: "constant.numeric.heptagon"
			}
		]
	type:
		patterns: [
			{ # Arrays fixed sized
				match: "([a-z_]+)([0-9\^][0-9]+)"
				captures:
					1: patterns: [ { include: "#type" } ]
					2: name: "entity.name.type.heptagon"
			}
			{ # Arrays variable sized
				match: "([a-z_]+)([a-z\^][a-z]+)"
				captures:
					1: patterns: [ { include: "#type" } ]
					2: name: "entity.name.type.heptagon"
			}
			{ # Natives
				match: "(int|bool|float)"
				name: "entity.name.type.heptagon"
			}
			{ # User types
				match: "([a-z_]+)"
				name: "entity.name.type.heptagon"
			}
		]
	languageConstant:
		patterns: [
			{
				include: "#languageBoolean"
			}
		]
	languageBoolean:
		match: "(true|false)"
		captures: 1: name: "constant.language.heptagon"
